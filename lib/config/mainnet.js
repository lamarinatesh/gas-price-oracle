"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onChainOracles = exports.offChainOracles = exports["default"] = void 0;
var ethgasstation = {
  name: 'ethgasstation',
  url: 'https://ethgasstation.info/json/ethgasAPI.json',
  instantPropertyName: 'fastest',
  fastPropertyName: 'fast',
  standardPropertyName: 'average',
  lowPropertyName: 'safeLow',
  denominator: 10,
  additionalDataProperty: null
};
var etherchain = {
  name: 'etherchain',
  url: 'https://etherchain.org/api/gasnow',
  instantPropertyName: 'rapid',
  fastPropertyName: 'fast',
  standardPropertyName: 'standard',
  lowPropertyName: 'slow',
  denominator: 1e9,
  additionalDataProperty: 'data'
}; // const anyblock: OffChainOracle = {
//   name: 'anyblock',
//   url: 'https://api.anyblock.tools/ethereum/latest-minimum-gasprice',
//   instantPropertyName: 'instant',
//   fastPropertyName: 'fast',
//   standardPropertyName: 'standard',
//   lowPropertyName: 'slow',
//   denominator: 1,
//   additionalDataProperty: null,
// }

var chainlink = {
  name: 'chainlink',
  callData: '0x50d25bcd',
  contract: '0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C',
  denominator: '1000000000'
};
var offChainOracles = {
  ethgasstation: ethgasstation,
  // anyblock,
  etherchain: etherchain
};
exports.offChainOracles = offChainOracles;
var onChainOracles = {
  chainlink: chainlink
};
exports.onChainOracles = onChainOracles;
var _default = {
  offChainOracles: offChainOracles,
  onChainOracles: onChainOracles
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJldGhnYXNzdGF0aW9uIiwibmFtZSIsInVybCIsImluc3RhbnRQcm9wZXJ0eU5hbWUiLCJmYXN0UHJvcGVydHlOYW1lIiwic3RhbmRhcmRQcm9wZXJ0eU5hbWUiLCJsb3dQcm9wZXJ0eU5hbWUiLCJkZW5vbWluYXRvciIsImFkZGl0aW9uYWxEYXRhUHJvcGVydHkiLCJldGhlcmNoYWluIiwiY2hhaW5saW5rIiwiY2FsbERhdGEiLCJjb250cmFjdCIsIm9mZkNoYWluT3JhY2xlcyIsIm9uQ2hhaW5PcmFjbGVzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9tYWlubmV0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9mZkNoYWluT3JhY2xlLCBPZmZDaGFpbk9yYWNsZXMsIE9uQ2hhaW5PcmFjbGUsIE9uQ2hhaW5PcmFjbGVzIH0gZnJvbSAnQC9zZXJ2aWNlcydcblxuY29uc3QgZXRoZ2Fzc3RhdGlvbjogT2ZmQ2hhaW5PcmFjbGUgPSB7XG4gIG5hbWU6ICdldGhnYXNzdGF0aW9uJyxcbiAgdXJsOiAnaHR0cHM6Ly9ldGhnYXNzdGF0aW9uLmluZm8vanNvbi9ldGhnYXNBUEkuanNvbicsXG4gIGluc3RhbnRQcm9wZXJ0eU5hbWU6ICdmYXN0ZXN0JyxcbiAgZmFzdFByb3BlcnR5TmFtZTogJ2Zhc3QnLFxuICBzdGFuZGFyZFByb3BlcnR5TmFtZTogJ2F2ZXJhZ2UnLFxuICBsb3dQcm9wZXJ0eU5hbWU6ICdzYWZlTG93JyxcbiAgZGVub21pbmF0b3I6IDEwLFxuICBhZGRpdGlvbmFsRGF0YVByb3BlcnR5OiBudWxsLFxufVxuXG5jb25zdCBldGhlcmNoYWluOiBPZmZDaGFpbk9yYWNsZSA9IHtcbiAgbmFtZTogJ2V0aGVyY2hhaW4nLFxuICB1cmw6ICdodHRwczovL2V0aGVyY2hhaW4ub3JnL2FwaS9nYXNub3cnLFxuICBpbnN0YW50UHJvcGVydHlOYW1lOiAncmFwaWQnLFxuICBmYXN0UHJvcGVydHlOYW1lOiAnZmFzdCcsXG4gIHN0YW5kYXJkUHJvcGVydHlOYW1lOiAnc3RhbmRhcmQnLFxuICBsb3dQcm9wZXJ0eU5hbWU6ICdzbG93JyxcbiAgZGVub21pbmF0b3I6IDFlOSxcbiAgYWRkaXRpb25hbERhdGFQcm9wZXJ0eTogJ2RhdGEnLFxufVxuXG4vLyBjb25zdCBhbnlibG9jazogT2ZmQ2hhaW5PcmFjbGUgPSB7XG4vLyAgIG5hbWU6ICdhbnlibG9jaycsXG4vLyAgIHVybDogJ2h0dHBzOi8vYXBpLmFueWJsb2NrLnRvb2xzL2V0aGVyZXVtL2xhdGVzdC1taW5pbXVtLWdhc3ByaWNlJyxcbi8vICAgaW5zdGFudFByb3BlcnR5TmFtZTogJ2luc3RhbnQnLFxuLy8gICBmYXN0UHJvcGVydHlOYW1lOiAnZmFzdCcsXG4vLyAgIHN0YW5kYXJkUHJvcGVydHlOYW1lOiAnc3RhbmRhcmQnLFxuLy8gICBsb3dQcm9wZXJ0eU5hbWU6ICdzbG93Jyxcbi8vICAgZGVub21pbmF0b3I6IDEsXG4vLyAgIGFkZGl0aW9uYWxEYXRhUHJvcGVydHk6IG51bGwsXG4vLyB9XG5cbmNvbnN0IGNoYWlubGluazogT25DaGFpbk9yYWNsZSA9IHtcbiAgbmFtZTogJ2NoYWlubGluaycsXG4gIGNhbGxEYXRhOiAnMHg1MGQyNWJjZCcsXG4gIGNvbnRyYWN0OiAnMHgxNjlFNjMzQTJEMUU2YzEwZEQ5MTIzOEJhMTFjNEE3MDhkZkVGMzdDJyxcbiAgZGVub21pbmF0b3I6ICcxMDAwMDAwMDAwJyxcbn1cblxuZXhwb3J0IGNvbnN0IG9mZkNoYWluT3JhY2xlczogT2ZmQ2hhaW5PcmFjbGVzID0ge1xuICBldGhnYXNzdGF0aW9uLFxuICAvLyBhbnlibG9jayxcbiAgZXRoZXJjaGFpbixcbn1cblxuZXhwb3J0IGNvbnN0IG9uQ2hhaW5PcmFjbGVzOiBPbkNoYWluT3JhY2xlcyA9IHtcbiAgY2hhaW5saW5rLFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9mZkNoYWluT3JhY2xlcyxcbiAgb25DaGFpbk9yYWNsZXMsXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU1BLGFBQTZCLEdBQUc7RUFDcENDLElBQUksRUFBRSxlQUQ4QjtFQUVwQ0MsR0FBRyxFQUFFLGdEQUYrQjtFQUdwQ0MsbUJBQW1CLEVBQUUsU0FIZTtFQUlwQ0MsZ0JBQWdCLEVBQUUsTUFKa0I7RUFLcENDLG9CQUFvQixFQUFFLFNBTGM7RUFNcENDLGVBQWUsRUFBRSxTQU5tQjtFQU9wQ0MsV0FBVyxFQUFFLEVBUHVCO0VBUXBDQyxzQkFBc0IsRUFBRTtBQVJZLENBQXRDO0FBV0EsSUFBTUMsVUFBMEIsR0FBRztFQUNqQ1IsSUFBSSxFQUFFLFlBRDJCO0VBRWpDQyxHQUFHLEVBQUUsbUNBRjRCO0VBR2pDQyxtQkFBbUIsRUFBRSxPQUhZO0VBSWpDQyxnQkFBZ0IsRUFBRSxNQUplO0VBS2pDQyxvQkFBb0IsRUFBRSxVQUxXO0VBTWpDQyxlQUFlLEVBQUUsTUFOZ0I7RUFPakNDLFdBQVcsRUFBRSxHQVBvQjtFQVFqQ0Msc0JBQXNCLEVBQUU7QUFSUyxDQUFuQyxDLENBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUUsU0FBd0IsR0FBRztFQUMvQlQsSUFBSSxFQUFFLFdBRHlCO0VBRS9CVSxRQUFRLEVBQUUsWUFGcUI7RUFHL0JDLFFBQVEsRUFBRSw0Q0FIcUI7RUFJL0JMLFdBQVcsRUFBRTtBQUprQixDQUFqQztBQU9PLElBQU1NLGVBQWdDLEdBQUc7RUFDOUNiLGFBQWEsRUFBYkEsYUFEOEM7RUFFOUM7RUFDQVMsVUFBVSxFQUFWQTtBQUg4QyxDQUF6Qzs7QUFNQSxJQUFNSyxjQUE4QixHQUFHO0VBQzVDSixTQUFTLEVBQVRBO0FBRDRDLENBQXZDOztlQUlRO0VBQ2JHLGVBQWUsRUFBZkEsZUFEYTtFQUViQyxjQUFjLEVBQWRBO0FBRmEsQyJ9